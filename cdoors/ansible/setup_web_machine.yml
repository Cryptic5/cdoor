---
- name: Configure webserver-vm using Docker
  hosts: localhost
  become: yes
  vars:
    apache_container_name: "apache-webserver"
    apache_image: "httpd:2.4"
    github_repo: "https://raw.githubusercontent.com/Cryptic5/cdoor/main/cdoors/web"
    repo_clone_dir: "/usr/local/apache2/htdocs"
    files_to_download:
      - index.html
      - login.html
      - register.html
      - services.html
      - style.css
      - vm_info.html

  tasks:
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: present
        force_apt_get: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip

    - name: Install Docker Python library
      pip:
        name: docker
        state: present

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        force_apt_get: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Apache Docker image
      docker_image:
        name: "{{ apache_image }}"
        source: pull

    - name: Run Apache Docker container
      docker_container:
        name: "{{ apache_container_name }}"
        image: "{{ apache_image }}"
        state: started
        ports:
          - "80:80"
        command: /bin/sh -c "apt-get update && apt-get install -y curl && httpd-foreground"

    - name: Download required files directly into Docker container
      shell: >
        docker exec {{ apache_container_name }} sh -c
        "curl -o {{ repo_clone_dir }}/{{ item }} {{ github_repo }}/{{ item }}"
      with_items:
        - index.html
        - login.html
        - register.html
        - services.html
        - style.css
        - vm_info.html

    - name: List files in container to confirm cloning
      shell: >
        docker exec {{ apache_container_name }}
        ls -l {{ repo_clone_dir }}
      register: repo_files

    - name: Display cloned files
      debug:
        var: repo_files.stdout_lines

    - name: Check if Apache container is running
      shell: "docker ps -q -f name={{ apache_container_name }}"
      register: container_check
      changed_when: false

    - name: Fail if Apache container is not running
      fail:
        msg: "Apache container {{ apache_container_name }} is not running."
      when: container_check.stdout == ""

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted