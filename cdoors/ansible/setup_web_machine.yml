---
- name: Configure webserver using Docker
  hosts: webserver-vm
  become: yes
  vars:
    docker_image: "httpd:2.4"
    docker_container_name: "apache-webserver"
    one_auth_path: "/var/lib/one/.one/one_auth"
    opennebula_user: "{{ openebula_user }}"
    opennebula_password: "{{ opennebula_password }}"
    github_base_url: "https://raw.githubusercontent.com/Cryptic5/cdoor/main/cdoors/web"
    web_files:
      - login.php
      - register.php
      - services.php
      - style.css
      - logout.php
      - index.php
      - vm_info.php
      - logout.php
      - vm.py
    docker_ports:
      - "80:80"

  vars_files:
    - "{{ playbook_dir }}/passwords.yml"

  tasks:
    - name: Ensure apt lists directory exists
      file:
        path: /var/lib/apt/lists
        state: directory
        mode: '0755'

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 86400

    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - python3
          - python3-pip
        state: present
        force_apt_get: yes
        update_cache: yes

    - name: Install Docker Python library
      pip:
        name: docker
        state: present

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        force_apt_get: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Apache Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull

    - name: Run Apache Docker container
      docker_container:
        name: "{{ docker_container_name }}"
        image: "{{ docker_image }}"
        state: started
        ports: "{{ docker_ports }}"
        volumes:
          - "/var/www/html:/usr/local/apache2/htdocs"

    - name: Deploy website files
      copy:
        src: "{{ playbook_dir }}/../web/{{ item }}"
        dest: /var/www/html/
        mode: '0644'
      loop:
        - db_config.json

    - name: Create or update oneauth file inside the container
      shell: |
        docker exec {{ docker_container_name }} bash -c "mkdir -p /var/lib/one/.one && echo '{{ opennebula_user }}:{{ opennebula_password }}' > {{ one_auth_path }}"
      args:
        executable: /bin/bash

    - name: Install required packages inside the container
      command: docker exec {{ docker_container_name }} /bin/sh -c "apt-get update && apt-get install -y curl dos2unix php python3-pip python3-setuptools libapache2-mod-php python3-psycopg2 php-pgsql"

    - name: Add OpenNebula GPG key inside Docker container
      shell: |
        docker exec {{ docker_container_name }} curl -fsSL https://downloads.opennebula.org/repo/repo.key | apt-key add -
      args:
        executable: /bin/bash

    - name: Add OpenNebula repository inside Docker container
      shell: |
        docker exec {{ docker_container_name }} echo 'deb https://downloads.opennebula.org/repo/5.6/Ubuntu/18.04 stable opennebula' > /etc/apt/sources.list.d/opennebula.list
      args:
        executable: /bin/bash

    - name: Update apt cache inside Docker container
      shell: |
        docker exec {{ docker_container_name }} /bin/bash -c "apt-get update"
      args:
        executable: /bin/bash

    - name: Install OpenNebula tools inside Docker container
      shell: |
        docker exec {{ docker_container_name }} apt-get update && apt-get install -y opennebula-tools && apt-get clean
      args:
        executable: /bin/bash

    - name: Download and deploy website files into the Docker container
      shell: |
        docker exec {{ docker_container_name }} curl -o /usr/local/apache2/htdocs/{{ item }} {{ github_base_url }}/{{ item }}
      loop: "{{ web_files }}"
      args:
        executable: /bin/bash

    - name: Ensure VM script is executable
      shell: |
        docker exec {{ docker_container_name }} chmod +x /usr/local/apache2/htdocs/vm.py
      args:
        executable: /bin/bash

    - name: Reformat vm.py to Unix format inside Docker container
      shell: docker exec {{ docker_container_name }} dos2unix /usr/local/apache2/htdocs/vm.py
      notify:
        - Stop Apache Docker container
        - Start Apache Docker container

    - name: Ensure Apache can read the oneauth file
      shell: |
        docker exec {{ docker_container_name }} bash -c "chmod 0640 {{ one_auth_path }} && chown root:www-data {{ one_auth_path }}"
      args:
        executable: /bin/bash

    - name: Allow Apache to run commands as root without password
      shell: |
        docker exec {{ docker_container_name }} bash -c "echo 'www-data ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
      args:
        executable: /bin/bash

  handlers:
    - name: Stop Apache Docker container
      community.docker.docker_container:
        name: apache-webserver
        state: stopped
        timeout: 60

    - name: Start Apache Docker container
      community.docker.docker_container:
        name: apache-webserver
        state: started
        timeout: 60